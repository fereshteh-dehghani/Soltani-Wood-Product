/* eslint-disable prettier/prettier */
import { useState, useEffect, useRef, useMemo, useCallback } from 'react';
import { Link } from 'react-router-dom';
import FuseScrollbars from '@fuse/core/FuseScrollbars';
import FuseLoading from '@fuse/core/FuseLoading';
import { AgGridReact } from 'ag-grid-react';
<<<<<<< HEAD
=======
// import basicinfo

import { useDispatch, useSelector } from 'react-redux';
import {
  FormControl,
  FormControlLabel,
  FormLabel,
  Grid,
  Radio,
  RadioGroup,
  TextField,
  FormGroup,
  Checkbox,
  Container,
  MenuItem,
} from '@mui/material';

import {
  BorderColorOutlined,
  CloseOutlined,
  DeleteForeverOutlined,
  DoneAllOutlined,
  EditOutlined,
} from '@mui/icons-material';
import AutoFixHighOutlinedIcon from '@mui/icons-material/AutoFixHighOutlined';
>>>>>>> 82f2ca86fa050c0c7f55ecb0b2ba2655cc1021f6
import { showMessage } from 'app/store/fuse/messageSlice';
import 'ag-grid-community/dist/styles/ag-grid.css';
import 'ag-grid-community/dist/styles/ag-theme-alpine.css';
import withRouter from '@fuse/core/withRouter';
import axios from 'axios';
import { Dropdown, Menu, Select } from 'antd';
import { Button, Modal, Text, Spacer } from '@nextui-org/react';
import { motion } from 'framer-motion';
<<<<<<< HEAD
import {deleteParty, fetchPartyList } from '../store/partyListSlice';
import RightClickParty from '../../right-click/RightClickParty';
=======
import '../../../../../styles/MyStyles.css';
import { Controller } from 'react-hook-form';
import { fetchPartyGroupJustChildList } from '../store/partyGroupSlice';

import { deleteParty, fetchPartyList } from '../store/partyListSlice';
>>>>>>> 82f2ca86fa050c0c7f55ecb0b2ba2655cc1021f6

function PartyListTable() {
  const dispatch = useDispatch();
  const gridStyle = useMemo(
    () => ({ height: '60vh', width: '100%', justifyContent: 'center', margin: '2% auto' }),
    []
  );
  const gridRef = useRef();
  const [modalDelete, setModalDelete] = useState(false);
  const [partyId, setPartyId] = useState();
<<<<<<< HEAD
  const {
    response,
    loading,
  } = useSelector(({ baseInformation }) => baseInformation.partyListSlice);
  const rowData =useSelector(({ baseInformation }) => baseInformation.partyListSlice.data);

=======
  const [partyGroupOptions, setPartyGroupOptions] = useState([]);
  const { response, loading } = useSelector(
    ({ baseInformation }) => baseInformation.partyListSlice
  );
  const rowData = useSelector(({ baseInformation }) => baseInformation.partyListSlice.data);
>>>>>>> 82f2ca86fa050c0c7f55ecb0b2ba2655cc1021f6

  const handleDeleteproduct = () => {
    setModalDelete(!modalDelete);
    dispatch(deleteParty(partyId))
      .unwrap()
      .then((res) => {
        if (res !== undefined && res.result && res.errors.length === 0) {
          dispatch(
            showMessage({
              message: 'عملیات با موفقیت انجام شد', // text or html
              autoHideDuration: 6000, // ms
              anchorOrigin: {
                vertical: 'top', //   top bottom
                horizontal: 'right', //  left center right
              },
              variant: 'success', //   success error info warning null
            })
          );
        } else {
          dispatch(
            showMessage({
              message: 'عملیات با خطا انجام شد', // text or html
              autoHideDuration: 6000, // ms
              anchorOrigin: {
                vertical: 'top', //   top bottom
                horizontal: 'right', //  left center right
              },
              variant: 'error', //   success error info warning null
            })
          );
        }
      })
      .catch((err) => {
        dispatch(
          showMessage({
            message: 'عملیات با خطا انجام شد', // text or html
            autoHideDuration: 6000, // ms
            anchorOrigin: {
              vertical: 'top', //   top bottom
              horizontal: 'right', //  left center right
            },
            variant: 'success', //   success error info warning null
          })
        );
      });
  };

  function deletePartyItem(e) {
    const tagItem = (
      <div>
        <Spacer y={0.5} />
        <Button
          color="error"
          onClick={() => {
            setPartyId(e.data.partyId);
            setModalDelete(true);
          }}
        >
        <Text size={12}> حذف</Text> 
        </Button>
      </div>
    );


    return tagItem;
  }

  function updatePartyItem(e) {
    const tagItem = (
      <div>
        <Spacer y={0.5} />
        <Button
          color="gradient"
          onClick={() => {
            setPartyId(e.data.partyId);
          }}
        >
          <Link to={`/apps/baseInformation/party/${e.value}/party-detailes`}>
            <Text size={12}> ویرایش</Text>
          </Link>
        </Button>
      </div>
    );
    return tagItem;
  }

<<<<<<< HEAD
  
=======
    // edit modal content---------------
    const [isCustomer , setIsCustomer] = useState(false)

  //----------------------------------

  //--------------------------------------------

  useEffect(() => {
    dispatch(fetchPartyGroupJustChildList())
      .unwrap()
      .then((res) => {
        const arrayList = [];
        res.forEach(function (element) {
          arrayList.push({ value: element.partyGroupId, label: element.title });
        });
        setPartyGroupOptions(arrayList);
      });
  }, []);

  // contextmenu part (Party)--------------------

  function handlePartyContextMenu(key) {
    setPartyId(localStorage.getItem('partyId'));
    if (key === 'delete') {
      setModalDelete(true);
    } else if (key === 'editDoubleClick') {
      navigate(`/apps/baseInformation/party/${localStorage.getItem('partyId')}/party-detailes`);
    } else if (key === 'edit') {
      window.open(`/apps/baseInformation/party/${localStorage.getItem('partyId')}/party-detailes`);
    }
  }

  // Context menu items---------

  const ContextMenu = (
    <Menu
      onClick={({ key }) => {
        handlePartyContextMenu(key);
      }}
      items={[
        {
          label: 'ویرایش در همین صفحه (دبل کلیک)',
          key: 'editDoubleClick',
          icon: <EditOutlined />,
        },
        {
          label: 'ویرایش در صفحه دیگر',
          key: 'edit',
          icon: <BorderColorOutlined />,
        },
        {
          label: 'حذف',
          key: 'delete',
          danger: true,
          icon: <DeleteForeverOutlined />,
        },
      ]}
    />
  );

  //----------------------------

  // handle multiple checked checkboxes----------------
  const [checkedPartyItems, setCheckedPartyItems] = useState([]);
  const [partyItemMultiEdit, setPartyItemMultiEdit] = useState([]);

  function handleCheckPartyList(ev) {
    const { value, checked } = ev.target;

    if (checked) {
      setCheckedPartyItems((prev) => [...prev, value]);
    } else {
      setCheckedPartyItems((prev) => {
        return [...prev.filter((c) => c !== value)];
      });
    }
  }

  const [tempraryArr,setTempraryArr] = useState([])
  const handleMultiEditAndDelete = (item) => {
    const tempItem = item.data.partyId
    setTempraryArr((pre)=>[...pre , item.data.partyId])
    if(tempraryArr.includes(tempItem)){
      console.log("mojoode,pas ezaf nemikonsm")
    }else{
      setPartyItemMultiEdit((pre) => [...pre, `${item.data.firstName}  ${item.data.lastName} `]);
    }
    // setPartyItemMultiEdit((pre) => [...pre, `${item.data.firstName}  ${item.data.lastName} `]);
  };

  // this function shows checkboxes in the table --------------------
  function CheckPartyItem(e) {
    const tagItem = (
      <div>
        <input
          id="rowCheckboxes"
          type="checkbox"
          onChange={(ev) => {
            handleCheckPartyList(ev);
            handleMultiEditAndDelete(e)
          }}
          value={e.data.partyId}
          // onClick={() => handleMultiEditAndDelete(e)}
        />
      </div>
    );

    return tagItem;
  }

  // Select/unselect all the checkboxes-----------

  // const checkboxes = document.querySelector("#rowCheckboxes");
  // function selectAll(myCheckbox) {
  //   console.log(checkboxes);
  //   console.log(myCheckbox.target.checked);
  //   if (myCheckbox.target.checked === true) {
  //     checkboxes.forEach((box) => {
  //       box.checked = true;
  //     });
  //   } else {
  //     checkboxes.forEach((box) => {
  //       box.checked = false;
  //     });
  //   }
  // }

  // ----------------------------------------

  function handlePartyId(e) {
    localStorage.setItem('partyId', e.data.partyId);
  }

  // Paginaton-----------------------------
  const onFirstDataRendered = useCallback(() => {
    gridRef.current.api.paginationGoToPage(1);
  }, []);

  const paginationNumberFormatter = useCallback((params) => {
    return `${params.value.toLocaleString()}`;
  }, []);

  // open update party on double click---------
  const navigate = useNavigate();

  // handle right click just on specified table ----------
  // const [showContext, setShowContext] = useState(false);

  // useEffect(() => {
  //   const handleClick = () => setShowContext(false);
  //   window.addEventListener('click', handleClick);
  //   return () => {
  //     window.removeEventListener('click', handleClick);
  //   };
  // }, [showContext]);
  // ------------------------------------------------------

>>>>>>> 82f2ca86fa050c0c7f55ecb0b2ba2655cc1021f6
  const defaultColDef = useMemo(() => ({
    sortable: true,
    filter: true,
    editable: false,
    animateRows: true,
  }));

  const gridOptions = {
    columnDefs: defaultColDef,
    rowData: null,
    enableRtl: true,
    defaultColDef: {
      editable: true,
      sortable: true,
      flex: 1,
      minWidth: 100,
      filter: true,
      resizable: true,
      cellStyle: { border: 'solid 0.1px gray' },
    },
  };

  const [columnDefs] = useState([
<<<<<<< HEAD
=======
    // field: 'Check'
    {
      field: 'checkRow',
      headerName: 'انتخاب ',
      width: 120,
      cellRenderer: CheckPartyItem,
    },
    // field: 'number'
    {
      field: 'numberOfRow',
      headerName: 'ردیف ',
      width: 110,
      // cellRenderer: rowNumberOfPartyItem,
      valueGetter: 'node.rowIndex + 1',
    },
>>>>>>> 82f2ca86fa050c0c7f55ecb0b2ba2655cc1021f6
    // field: 'title'
    {
      field: 'typePersion',
      headerName: 'نوع',
      // minWidth: 50,
    },
    {
      field: 'firstName',
      headerName: 'نام',
      // minWidth: 50,
    },
    {
      field: 'lastName',
      headerName: 'نام خانوادگی',
      // minWidth: 50,
    },
    {
      field: 'codeMelli',
      headerName: 'کد ملی',
      minWidth: 50,
    },
    {
      field: 'email',
      headerName: 'ایمیل',
      minWidth: 50,
    },
    {
      field: 'economicCode',
      headerName: 'کد اقتصادی',
      minWidth: 50,
    },
    {
        field: 'genderPersion',
        headerName: 'جنسیت',
        // minWidth: 50,
      },
    {
      field: 'partyId',
      headerName: 'ویرایش',
      cellRenderer: updatePartyItem,
      minWidth: 50,
    },
    {
      field: 'partyId',
      headerName: 'حذف',
      cellRenderer:deletePartyItem,
      minWidth: 50,
    },
  ]);


  const onGridReady = useEffect(() => {
    dispatch(fetchPartyList());
    console.log("rowData listproduct ", rowData);
  }, [response]);


  if (loading) {
    return <FuseLoading />;
  }

<<<<<<< HEAD
  function handlePartyId(e){
    localStorage.setItem("partyId" , e.data.partyId)
  }
=======

>>>>>>> 82f2ca86fa050c0c7f55ecb0b2ba2655cc1021f6

  return (
    <>
      <div className="w-full flex flex-col" style={{ justifyContent: 'center' }}>
<<<<<<< HEAD
        <FuseScrollbars className="grow overflow-x-auto">
          <RightClickParty/>
          <div style={gridStyle} className="ag-theme-alpine">
            <AgGridReact
              ref={gridRef}
              rowData={rowData}
              columnDefs={columnDefs}
              defaultColDef={defaultColDef}
              gridOptions={gridOptions}
              rowSelection="single"
              onGridReady={onGridReady}
              onCellContextMenu={(e)=> handlePartyId(e)}
            />
          </div>
=======
        <Grid sm={8} style={{ display: 'flex', justifyContent: 'flex-end', marginTop: '7px' }}>
          {/* <Button className="mx-3" style={{ fontSize: '13px' }} >
            انتخاب همه <DoneAllOutlined />
          </Button> */}

          {/* <input type="checkbox" onChange={(myCheckbox) => selectAll(myCheckbox)} /> */}

          <Button
            className="mx-3"
            style={{ fontSize: '13px' }}
            onClick={() => setModalMultiEdit(true)}
          >
            ویرایش موارد انتخابی <AutoFixHighOutlinedIcon />
          </Button>

          <Button className="mx-3" color="error" style={{ fontSize: '13px' }}>
            حذف موارد انتخابی <DeleteForeverOutlined />
          </Button>
        </Grid>

        <FuseScrollbars className="grow overflow-x-auto" id="rightClickTable">
          <Dropdown overlay={ContextMenu} trigger={['contextMenu']}>
            <div style={gridStyle} className="ag-theme-alpine">
              <AgGridReact
                ref={gridRef}
                rowData={rowData}
                columnDefs={columnDefs}
                defaultColDef={defaultColDef}
                gridOptions={gridOptions}
                rowSelection="single"
                onGridReady={onGridReady}
                // onCellFocused={() => setShowContext(true)}
                onCellContextMenu={(e) => {
                  handlePartyId(e);
                  // setShowContext(true);
                }}
                onCellDoubleClicked={(e) =>
                  navigate(`/apps/baseInformation/party/${e.data.partyId}/party-detailes`)
                }
                onFirstDataRendered={onFirstDataRendered}
                paginationNumberFormatter={paginationNumberFormatter}
                paginationAutoPageSize
                pivotPanelShow="always"
                pagination
                suppressPaginationPanel={false}
              />
            </div>
          </Dropdown>
>>>>>>> 82f2ca86fa050c0c7f55ecb0b2ba2655cc1021f6
        </FuseScrollbars>
      </div>
      <Modal
        closeButton
        preventClose
        aria-labelledby="modal-title"
        open={modalDelete}
        onClose={() => setModalDelete(false)}
        width="30%"
        height="40%"
      >
        <Modal.Header>
          <Text size={18}>آیا می خواهید این اطلاعات را حذف شوند؟</Text>
        </Modal.Header>
        <Modal.Body>
          <Button
            color="error"
            onClick={handleDeleteproduct}
            width="50%"
          >
            <Text size={14}>بلی</Text>
          </Button>{' '}
          <Button color="warning" width="50%" onClick={() => setModalDelete(false)}>
            <Text size={14}>خیر</Text>
          </Button>
        </Modal.Body>
      </Modal>
<<<<<<< HEAD
=======

      <Modal
        style={{ paddingTop: '0px' }}
        closeButton
        preventClose
        aria-labelledby="modal-title"
        open={modalMultiEdit}
        onClose={() => setModalMultiEdit(false)}
        width="46%"
        height="80%"
      >
        <Modal.Header className="Modal-Header" justify="flex-end">
          <select
            style={{
              color: 'black',
              fontWeight: '600',
              width: '28%',
              height: '28px',
              fontSize: '13px',
              border: '1px solid black',
              borderRadius: '5px',
            }}
          >
            {partyItemMultiEdit.map((partyItems) => (
              <option style={{ color: 'black', fontWeight: '600' }}>{partyItems}</option>
            ))}
          </select>
        </Modal.Header>

        <Modal.Body dir="rtl">
        
          <div className=" container justify-content-center">
            
            <h4 style={{textAlign:"right"}} className='mt-8' >نوع : </h4>

            <div style={{ display: 'flex', flexDirection: 'row' }} className='mb-24' >
              <input type="radio" name='legal' className='mx-4' /> <p>حقیقی</p>
              <input type="radio" name='legal' className='mx-4' />  <p>حقوقی</p>
            </div>

            <div className='my-24' style={{ display: 'flex', flexDirection: 'row' }}>
              <select
                placeholder="گروه طرف حساب"
                style={{
                  width: '15em',
                  border: '1px solid black',
                  padding: '4px',
                  borderRadius:   '5px',
                }}

              >
                <option>option</option>
              </select>

              <select
                className='mx-8'
                style={{
                  width: '15em',
                  border: '1px solid black',
                  padding: '4px',
                  borderRadius: '5px',
                }}
              >
                <option value={0}>آقا</option>
                <option value={1}>خانم</option>
              </select>
            </div>

            <h4 style={{textAlign:"right"}} >نقش : </h4>

            <div style={{ display: 'flex', flexDirection: 'row' }} className='mb-24' >
              <input type="checkbox"  className='mx-5' onChange={()=> setIsCustomer(!isCustomer)} />  <p> مشتری </p>
              <input type="checkbox"  className='mx-5' />  <p> فروشنده </p>
              <input type="checkbox"  className='mx-5' />  <p> تامین کننده </p>
            </div>

              {isCustomer &&
              <div id='isCustomer' className='my-24' >
                
                <h4 style={{textAlign:"right" , marginBottom:"4px" }} > اعتبار مشتری : </h4>
                
                <div style={{ display: 'flex', flexDirection: 'row' }} className='mb-24' >
                  <input type="checkbox" />  <p className='ml-20 mr-4' > مشتری اعتبار دارد </p>
                  <input type='text' placeholder='اعتبار مشتری *' style={{borderBottom:"2px solid black" , width:"10rem"}} />
                </div>
              
                <div style={{ display: 'flex', flexDirection: 'row' }} className='my-24' >
                  <input type="radio" name='commitFactor' className='ml-4' /> <p>هشدار در صورت ثبت فاکتور</p>
                  <input type="radio" name='commitFactor' className='mx-8' />  <p>عدم ثبت فاکتور</p>
                </div>

                <div style={{ display: 'flex', flexDirection: 'row' }} className='my-24' >
                  <input type="checkbox" />  <p className='ml-20 mr-4' > گرفتن چک از مشتری بلامانع است. </p>
                </div>      
              
              </div>
              }


          </div>

          <Spacer y={1} />
        </Modal.Body>

        <Modal.Footer>
          <Button color="primary">
            <Text size={14}>
              {' '}
              <AutoFixHighOutlinedIcon /> ویرایش
            </Text>
          </Button>{' '}
          <Button color="error" onClick={() => setModalMultiEdit(false)}>
            <Text size={14}> بستن</Text>
          </Button>
        </Modal.Footer>
      </Modal>
>>>>>>> 82f2ca86fa050c0c7f55ecb0b2ba2655cc1021f6
    </>
  );
}

export default PartyListTable;
